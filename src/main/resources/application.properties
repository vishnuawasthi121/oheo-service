server.port=8443
server.servlet.context-path=/oheo-service

#spring.thymeleaf.cache=false
#spring.thymeleaf.enabled=true
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
 
spring.application.name=oheo-service
spring.profiles.active=dev
# h2 database props
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:mem:OHEO_DB;DB_CLOSE_DELAY=-1
#spring.datasource.username=sa
#spring.datasource.password=
# Local Database
#spring.datasource.url=jdbc:postgresql://localhost:5432/oheo_db
#spring.datasource.username=postgres
#spring.datasource.password=root

# Server Database 
spring.datasource.url=jdbc:postgresql://13.234.212.83:5432/oheo_db
spring.datasource.username=postgres
spring.datasource.password=Ogive@11

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL81Dialect

# H2 console access 
spring.h2.console.enabled=true


#By default, the data.sql script executes before Hibernate initialization. This aligns the script-based initialization with other database migration tools such as Flyway and Liquibase. As we're recreating the schema generated by Hibernate each time, we need to set an additional property:This modifies the default Spring Boot behavior and populates the data after the schema is generated by Hibernate. Furthermore, we can also use a schema.sql script to build upon the Hibernate-generated schema prior to the population with data.sql. However, this mixing of different schema-generation mechanisms is not recommended.
#This will ensure that after Hibernate schema creation is performed, then additionally schema.sql is read for any additional schema changes, and further data.sql is executed to populate the database. 
#Also, as explained in the previous section, script-based initialization is performed by default only for embedded databases. To always initialize a database using scripts, we'll have to use:
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always
## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# maximum file size for each request
spring.servlet.multipart.max-file-size=10MB
# maximum size for a multipart requests.
spring.servlet.multipart.max-request-size=10MB

# This line fixed the problem of failure listed at https://www.springcloud.io/post/2022-05/springboot-swagger/#gsc.tab=0
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# Email Properties 
app.email.sender.username=vishnu.awasthi.dev9@gmail.com
mail.smtp.host=smtp.gmail.com
mail.smtp.socketFactory.port=465
mail.smtp.ssl.enable=true
mail.smtp.auth=true
mail.smtp.port=465
app.mail.password=
# Properteis to control email trigger during registraion of user
app.email.enabled=false
oheo.user.registration.email.subject=Welcome to OHEO
##################### ENABLE SSL ####################
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/keystore.p12

# The password used to generate the certificate
server.ssl.key-store-password=123456
# The alias mapped to the certificate
server.ssl.key-alias=tomcat
server.ssl.enabled=true
server.max-http-header-size=12288

